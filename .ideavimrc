" .ideavimrc is a configuration file for IdeaVim plugin. It uses the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc
 

" ------------------------------------- Set options below ------------------------------------------------------
 
set easymotion                          " use plugin installed from IDEA
set quickscope                          " use plugin installed from IDEA

set ignorecase                          " case insensitive
set smartcase                           " use case sensitive when capital letters is input
set hlsearch                            " highlight search
set incsearch                           " incremental search
set number                              " add line numbers
set relativenumber                      " add relative line numbers
set colorcolumn=100                     " set an 100 column border for good coding style
syntax on                               " syntax highlighting
set list                                " show whitespace
set breakindent                         " indent soft wrapped lines to match the first line's indent
set viminfo=100                         " remember viminfo when restarts
set visualbell                          " when on, prevent beeping on error
set matchpairs+=<:>                     " % also match '<'s and '>'s
set scrolloff=6                         " Show a few lines of context around the cursor.
noh                                     " reset highlight when restarts.
              
" place cursor where there is no actual text,
" 'onemore' allows the cursor to move just past the end of the line
set virtualedit=onemore 

" IDEA VIM Specific
set clipboard^=unnamed,unnamedplus



" ----------------------------------------- Plugins below --------------------------------------------------------

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
 
Plug 'machakann/vim-highlightedyank'                       " Highlight copied text
Plug 'tpope/vim-commentary'                                " Commentary plugin
Plug 'preservim/nerdtree'                                  " Use NERDTree shortcut to control file navigator
Plug 'tpope/vim-surround'                                  " Surrounding word e.g., ysiw' to surround word with '.
                                                           " In Visual mode press S{char} to surround {char} outside.
Plug 'terryma/vim-multiple-cursors'                        " CTRL + N for multiple cursor


" Quickscope highlight keys settings
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

 

" ------------------------------------------ Key maps below -------------------------------------------------------

" Map <leader> key
let mapleader=" "


" +++++++++++++++++++ Map \{char} keys +++++++++++++++++++++
 
" Map Reformat Code and save
map \r <Action>(ReformatCode) :write<CR>

" Map toggle the breakpoint on the current line
map \b <Action>(ToggleLineBreakpoint)

" Map show Quick Documentation and Error Description
map \q <Action>(ShowHoverInfo)

" Map show Quick Definition
map \e <Action>(QuickImplementations)

" Map show Parameter Info
map \p <Action>(ParameterInfo)

" Map close file tab
map \x <Action>(CloseContent)

" Map show terminal window
map \t <Action>(ActivateTerminalToolWindow)

" Map toggle distraction free mode
map \z <Action>(ToggleDistractionFreeMode)

" Map file structure pop up - show attributes of current file
map \f <Action>(FileStructurePopup)

" Map hide all side windows
map \h <Action>(HideAllWindows)

" Map stop showing highlights.
nnoremap \n :noh<CR>


" +++++++++++++++++++ Map <leader>{char} keys ++++++++++++++++++++

" Map NERDTree
nnoremap <leader>z :NERDTreeFocus<CR>

" Split window
nmap <leader>| <Action>(SplitVertically)
nmap <leader>_ <Action>(SplitHorizontally)
nmap <leader>\ <Action>(MoveTabRight)
nmap <leader>- <Action>(MoveTabDown)
nmap <leader>o <Action>(MoveEditorToOppositeTabGroup)
nmap <leader>O <Action>(Unsplit)
nmap <leader>x <Action>(CloseAllEditorsButActive)
nmap <leader>X <Action>(CloseAllEditors)

" Easymotion mappings
  " <leader>f{char}    |  <Plug>(easymotion-f)
  " <leader>F{char}    |  <Plug>(easymotion-F)
  " <leader>t{char}    |  <Plug>(easymotion-t)
  " <leader>T{char}    |  <Plug>(easymotion-T)
  " <leader>w          |  <Plug>(easymotion-w)
  " <leader>W          |  <Plug>(easymotion-W)
  " <leader>b          |  <Plug>(easymotion-b)
  " <leader>B          |  <Plug>(easymotion-B)
  " <leader>e          |  <Plug>(easymotion-e)
  " <leader>E          |  <Plug>(easymotion-E)
  " <leader>ge         |  <Plug>(easymotion-ge
  " <leader>gE         |  <Plug>(easymotion-gE
  " <leader>j          |  <Plug>(easymotion-j)
  " <leader>k          |  <Plug>(easymotion-k)
  " <leader>n          |  <Plug>(easymotion-n)
  " <leader>N          |  <Plug>(easymotion-N)
  " <leader>s          |  <Plug>(easymotion-s)
map <Leader> <Plug>(easymotion-prefix)

" Multiple-cursors shortcuts. Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
" Feel free to pick your own mappings that are not affected. I like to use <leader>
nmap <leader><C-n> <Plug>AllWholeOccurrences
xmap <leader><C-n> <Plug>AllWholeOccurrences
nmap <leader>g<C-n> <Plug>AllOccurrences
xmap <leader>g<C-n> <Plug>AllOccurrences


" +++++++++++++++++++ Map <leader><leader>{char} keys +++++++++++++++++++++

" Map set scrolloff=0 / reset to 6 to solve Jupyter notebook screen jumping issue.
nnoremap <leader><leader>s :set scrolloff=0<CR>
nnoremap <leader><leader>S :set scrolloff=6<CR>


" ++++++++++++++++++++ Map {char} combo keys +++++++++++++++++++

" Navigate jump to functions
map [[ <Action>(MethodUp)
map ]] <Action>(MethodDown)

" Go to jump - similar to IDEA left click on functions.
map gd <Action>(GotoDeclaration)
map gc <Action>(GotoClass)
map gi <Action>(GotoImplementation)
map gs <Action>(GotoSuperMethod)

" IDEA action - go to next/previous position, same as VIM <Ctrl>-i / <Ctrl>-o
map gf <Action>(Forward)
map gb <Action>(Back)

" Yank til end of line. Default is to yank whole line as yy.
nnoremap Y y$

" Put search results in the middle of the screen
nnoremap n nzz
nnoremap N Nzz

" Don't use Ex mode, use Q for formatting.
map Q gq

" ++++++++++++++++++++ Map <Ctrl>{char} keys ++++++++++++++++++++++

" Remap IDEA <Alt>Right/Left to <Ctrl>Right/Left
map <C-Right> <Action>(NextTab)
map <C-Left> <Action>(PreviousTab)

" Map <Ctrl>-Up/Down to VIM key #/* to jump to previous/next whole word.
nnoremap <C-Up> #
nnoremap <C-Down> *

" Quick window navigation in split window
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h

" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence



" ----------------------------------------Set IDEA handler below ---------------------------------------------------

" n - normal mode
" i - insert mode
" x - visual mode
" v - visual and select modes
" a - all modes
" ide - use IDE handler
" vim - use Vim handler
" Example below:
" sethandler <C-C> n-v:ide i:vim

sethandler <C-A> n:vim i-x:ide
sethandler <C-Q> n-x:vim i:ide
sethandler <C-P> n-x:vim i:ide




